// $Id: PnfsManagerPanel.java,v 1.1 2008/11/09 08:23:58 cvs Exp $
//
package org.dcache.gui.pluggins.pnfs ;
//
import org.dcache.gui.pluggins.*;
import org.dcache.gui.pluggins.pools.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.font.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.* ;
import javax.swing.border.* ;
import java.util.*;
import java.io.* ;
import java.util.prefs.* ;
import org.pcells.services.connection.DomainConnection ;
import org.pcells.services.connection.DomainConnectionListener ;
import org.pcells.services.connection.DomainEventListener ;
import org.pcells.services.gui.* ;
import org.pcells.services.gui.util.* ;
import diskCacheV111.vehicles.CostModulePoolInfoTable ;
import diskCacheV111.pools.PoolCostInfo ;


public class      PnfsManagerPanel
       extends    CellGuiSkinHelper.CellPanel 
       implements ActionListener{
                  
   private DomainConnection _connection      = null ;
   private Preferences      _preferences     = null ;
   
   private boolean _debug = true ;
   
   public PnfsManagerPanel( DomainConnection connection , Preferences preferences ){
   
      _connection  = connection ;
      _preferences = preferences ;
      
      BorderLayout l = new BorderLayout(10,10) ;
      setLayout(l) ;
      
      setBorder( BorderFactory.createTitledBorder( 
	         BorderFactory.createLineBorder( Color.blue , 1 ) , 
                "Pnfs Manager" ) ) ;
 
      add( new Controller( )  , "North" ) ;
      
       
   }
    public void actionPerformed( ActionEvent event ){
   
   }
   private class Controller 
           extends JPanel 
	   implements ActionListener  {
   
      private JButton _updateTree     = new JButton("Update Tree") ;
      private JButton _updateCost     = new JButton("Update Cost") ;
      private JCheckBox _costByMover  = new JCheckBox("Cost by Mover");
      private JCheckBox _costDetails  = new JCheckBox("Cost Details");
      private JComboBox _autoUpdate   = null ;
      private boolean   _weAreWaiting = false ;
      
      private javax.swing.Timer _autoUpdateTimer  = new javax.swing.Timer( 100 , this ) ; 
      
      private class AutoObject {
         private String name ;
	 private long   interval ;
	 private AutoObject( String name , long interval ){
	   this.name = name ; this.interval = interval ;
	 }
	 public String toString(){return name ; }
	 public long getInterval(){ return interval ; }
      }
 
      private AutoObject [] _autoLabels = {
            new AutoObject("Manual",0L) , 
	    new AutoObject("2 Sec",2L), 
	    new AutoObject("10 Sec",10L), 
	    new AutoObject("30 Sec",30L),
	    new AutoObject("1 min" ,60L),
     };
  
      private Controller(){
      
         setLayout( new FlowLayout(FlowLayout.CENTER,10,10) ) ; 
         setBorder( BorderFactory.createEtchedBorder( ) ) ;
	 
	 _autoUpdate = new JComboBox(_autoLabels);
	 
	 _autoUpdate.addActionListener(this) ;
	 _updateTree.addActionListener(this);
	 _updateCost.addActionListener(this);
	 _costByMover.addActionListener(this);
	 _costDetails.addActionListener(this);
	 
	 add( _autoUpdate ) ;
//	 add( _updateTree ) ;
//	 add( _updateCost ) ;
//	 add( _costByMover ) ;
//	 add( _costDetails ) ;
	 
 	 
      }
      public void actionPerformed( ActionEvent event ){
         Object source = event.getSource() ;
         if( source == _updateTree ){
	 }else if( source == _updateCost ){
	     
	 }else if( source == _costByMover ){
	     
	     
	 }else if( source == _costDetails ){
	     
	     
	 }else if( source == _autoUpdate ){

	     AutoObject auto = (AutoObject)_autoUpdate.getSelectedItem() ;
	     if( auto == null )return ;
	     if( auto.interval == 0 ){
	         _autoUpdateTimer.stop() ;
		 _updateCost.setEnabled(true);
		 _updateTree.setEnabled(true);
             }else{
	         _autoUpdateTimer.stop() ;
		 _autoUpdateTimer.setDelay( (int) (auto.interval*1000L ) ) ;
	         _autoUpdateTimer.start() ;
		 _updateCost.setEnabled(false);
		 _updateTree.setEnabled(false);
 	     }
	 }else if( source == _autoUpdateTimer ){
	     _updateCost.setEnabled(false);
	     _updateTree.setEnabled(false);
             System.out.println("Ping : "+System.currentTimeMillis());
	 }
      }
   }
   
}